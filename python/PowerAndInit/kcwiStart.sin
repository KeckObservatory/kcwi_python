#! @KPYTHON@
from KCWI import PowerInit, Calibration
from KCWI.Helper import sleepdots
#import kcwiInit
import ktl
import os
import sys
import time
import subprocess
import argparse


separator = "----------------------------------------"
#####TODO delete this if we get rid of message file stuff
#mf = open('message_file', 'w')

# parse flags...

description = "Start KCWI"
parser = argparse.ArgumentParser(description=description)
parser.add_argument('-no_init', required=False, default=False, action='store_true', help='Run without init script')
parser.add_argument('-eng',required=False, default=False, action='store_true', help='Run in engineering mode')
parser.add_argument('-oa',required=False, default=False, action='store_true', help='Run in OA mode')

args = parser.parse_args()

do_init = 1

# -------------------------------------------------------------------
# check for daemons...NOTE that we do NOT check on watchfcs, watchrot,
# and watchslew processes because these run as user 'mosfire' rather
# than under the numbered account and hence their existence does NOT
# present a conflict.
# -------------------------------------------------------------------



running_daemons = []
for daemon in ["kcwidisplayb", "kfcdisplay", "magiqdisplay"]:
    command = "get_kcwi_pid %s" % daemon
    p = subprocess.Popen(command, stdout = subprocess.PIPE, stderr = subprocess.PIPE, shell=True)
    (output, error) = p.communicate()
    if output != "":
        running_daemons.append(daemon)

if len(running_daemons) != 0:
    print("Can't start KCWI software because these daemons are already running:\n%s\nSee output below. You must stop these conflicting daemons to launch KCWI software!" % running_daemons)
    sys.exit(1)


# -------------------------------------------------------------------
# define display layout appropriate for number of screens on host...
# -------------------------------------------------------------------

if os.environ.get("DISPLAY") is None:
    print("ERROR: must set DISPLAY before running this program")
    sys.exit(1)

# set display variables...
#TODO turn this into for loop using a list, not sure how intereaction with later shell will work
disp = subprocess.Popen("uidisp 0", stdout = subprocess.PIPE, stderr = subprocess.PIPE, shell=True)
(output, err) = disp.communicate()
#disp.wait()
uidisp0 = output.replace('\n','')
disp = subprocess.Popen("uidisp 1", stdout = subprocess.PIPE, stderr = subprocess.PIPE, shell=True)
(output, err) = disp.communicate()
#disp.wait()
uidisp1 = output.replace('\n','')
disp = subprocess.Popen("uidisp 2", stdout = subprocess.PIPE, stderr = subprocess.PIPE, shell=True)
(output, err) = disp.communicate()
#disp.wait()
uidisp2 = output.replace('\n','')
disp = subprocess.Popen("uidisp 3", stdout = subprocess.PIPE, stderr = subprocess.PIPE, shell=True)
(output, err) = disp.communicate()
#disp.wait()
uidisp3 = output.replace('\n','')

sleepdots(3)

# ---------------------------------------------------------------
# allow numbered user to restore default settings if desired...
# ---------------------------------------------------------------
if do_init == 1:
    #subprocess.call('clear')
    p=subprocess.Popen("kcwiInit", shell=True)
    p.wait()
#    if status > 0:
#    print("Can't start KCWI software. Some of the mechanisms are locked.\nPlease inform the Support Astronomer.")
#####TODO figure out with other message file stuff
#    tkmessage -type error < $message_file
#    \rm $message_file
#    sys.exit(1)


# ---------------------------------------------------------------
# Start the kcwi DS9 Display utility and CSU audio widgets
# ---------------------------------------------------------------
#setenv DISPLAY $uidisp1
# Start KCWI's display software (ds9) and python relay

###TODO adding dictionary
#

start = [
	       ['Starting Blue image display software DS9', 'kcwidisplayb', uidisp1],
	       ['Starting focal plane display software DS9', 'kfcdisplay', uidisp1],
	       ['Starting Magiq display software DS9', 'magiqdisplay', uidisp2],
	       ['Starting Eventsound', 'eventsounds', uidisp2],
	       ['Starting KCWI Configuration Manager Backend', 'kcwiConfManager', None],
               ['Starting KCWI desktop', 'kdesktop', uidisp0]
	       ]

for tool in start:
    print(separator)
    print(tool[0])
    if tool[2] is not None:
        command = "kcwi start %s -D %s" % (tool[1], tool[2])
    else:
	command = "kcwi start %s" % tool[1]
    p = subprocess.Popen(command, stdout=subprocess.PIPE, stderr = subprocess.PIPE, shell=True)
    p.wait()
    time.sleep(1)


# # ----------------------------------------------------------------------
# # Arrange Guis on the desktops
# ----------------------------------------------------------------------
print(separator +
'''
Re-arranging GUIs
'''
+ separator)

time.sleep(10)

#TODO rewrite arrange guis in python
subprocess.Popen("kcwiArrangeGuis", stdout = subprocess.PIPE, stderr = subprocess.PIPE, shell=True)

start = [
	       ['Starting KCWI Calibration GUI', 'kcwiCalibrationGui', uidisp2],
	       ['Starting KCWI Status GUI', 'kcwiStatusGui', uidisp1],
	       ['Starting KCWI Exposure GUI', 'kcwiExposureGui', uidisp1],
	       ['Starting KCWI Offset GUI', 'kcwiOffsetGui', uidisp2]
	       ]

for tool in start:
    print(separator)
    print(tool[0])
    if tool[2] is not None:
        command = "kcwi start %s -D %s" % (tool[1], tool[2])
    else:
	command = "kcwi start %s" % tool[1]
    p = subprocess.Popen(command, stdout=subprocess.PIPE, stderr = subprocess.PIPE, shell=True)
    p.wait()
    time.sleep(1)



# power on hatch
PowerInit.kcwiPower(1, 7, "on")

#hatch open
Calibration.hatch("open")
#hatch close
Calibration.hatch("close")

# print completion message....

print(
'''
      ----------------------------------------------------------
                KDESKTOP might take a while to appear
      ----------------------------------------------------------
                       KCWI startup complete!
      ----------------------------------------------------------
''')

response = raw_input("Press <Enter> to exit...")

sys.exit(0)
