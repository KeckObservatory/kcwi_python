#! @KPYTHON@
import subprocess
import argparse
import os
import sys
import ktl

#LR move the definition of systems to a configuration file to be loaded
default_systems = ['computers', 'servers', 'power', 'settings', 'apps', 'daemons', 'stages'] 
choices = default_systems
choices.append('all')
#TODO see if we need to add -m option
#LR make "KCWI" a variable, so that it can be used in this string
# LR move this definition to a configuration file and read it in
instrument = 'KCWI'
description = "check functionality of all %s systems" % instrument
parser = argparse.ArgumentParser(description=description)
parser.add_argument('systems', nargs='*', choices=choices, default='all', help='choose which systems to check (default is all EXCEPT apps)')
args = parser.parse_args()

if args.systems == 'all':
    systems = ['computers', 'servers', 'power', 'settings', 'daemons', 'stages'] #list of strings in the system array without apps
else:
    systems = args.systems

        
# misc definitions...

(good, warning, error) = ("OK", "WARNING!\a", "ERROR!\a") 
error_count = 0
warning_count = 0


#label making function
def formatLabel(string):
    size = 45
    label = ' %s' % string
    while(len(label) < size):
        label += '.'
    return label

#reportStages function


def reportStages(system, system_dictionary):
    print("Checking %s %s:" % (instrument, system))
    errors = 0
    warnings = 0
    for record in system_dictionary:
        state = good
        message = ''
        (library, keyword) = (record['library'], record['keyword'])
        if record['isnameakeyword'] == 'yes':
            name  = ktl.read(library, record['name'])
        else:   
            name = record['name']

        sys.stdout.write(formatLabel("Checking %s" % name))
        sys.stdout.flush()

        value = ktl.read(library, keyword)

        if 'tmp' in keyword and keyword != -1:
            value = float(value) - 273.15

        if record['maxvalue'] is None: #if 'maxvalue' column is none, do goodvalue check
            if value != record['goodorminvalue']:
                state = record['badstatus']
                message = "Current value '%s' should be %s" % (value, record['goodorminvalue'])
        else:
            if record['goodorminvalue'] > float(value) or float(value) > record['maxvalue']:
                state = record['badstatus']
                message = "Current value %s outside of good range %s - %s" % (value, record['goodorminvalue'], record['maxvalue'])

        if record['locked'] is not None: #check for 'locked'
            try:
                ktl.read(library, 'lastalive')
                value = ktl.read(library, record['locked'])
                if int(value) != 0:
                    state = record['badstatus']
                    message = 'stage is locked out'
            except:
                state = warning
                message = 'Error: Cannot check stage status. No access to server.'


        if state == error:
            errors += 1
        elif state == warning:
            warnings += 1
        elif state != good:
            print("illegal BADSTATUS value is neither ERROR nor WARNING")
            return error, warning

        print("%s %s" % (state, message))
    return errors, warnings


# verify host...

normalHost ='kcwiserver'
testHost = 'kcwibuild'
environment = os.environ.get('HOST')
if environment != normalHost and environment != testHost:
    print("ERROR: you can only run testAll on %s or on %s" % (normalHost, testHost))
    sys.exit(1)


#----------------------------------------
# Check computers
#----------------------------------------
if 'computers' in systems:
    print("Checking %s computers:" % instrument)

    computer_description = {
        'kcwitarg' : 'detector target',
        'kcwiserver' : 'main server',
        'bexgalil' : 'blue exchanger Galil',
        'bmsgalil' : 'blue mechanisms Galil',
        'calgalil' : 'calibration unit Galil',
        'rotgalil' : 'rotator Galil',
        'lantronix' : 'Lantronix terminal server',
        'eaton' : 'AC power controller 1',
        'eaton2' : 'AC power controller 2',
        'eaton3' : 'AC power controller 3',
        'lakeshore' : 'Lakeshore unit'
    }
    for computer in sorted(computer_description):
        sys.stdout.write(formatLabel("Checking %s" % computer))
        sys.stdout.flush()
        command = "ping -c 1 -t 1 %s >/dev/null 2>&1" % computer
        #TODO popen was not working the way I thought here, switching to os.system. Check with LR
        #p =  subprocess.Popen(command, stdout = subprocess.PIPE, stderr = subprocess.PIPE, shell=True)
        #(output, err) = p.communicate()
        response = os.system(command)
        if response == 0:
            print("%s (%s)" % (good, computer_description[computer]))
        else:
            print("%s (%s)" % (error, computer_description[computer]))
            error_count+=1


#----------------------------------------
# Check servers
#----------------------------------------
if 'servers' in systems:
    print("Checking %s servers:" % instrument)

    server_description = {
        'kcwi' : 'global server',
        'kbes' : 'blue exchanger',
        'kbgs' : 'blue pressure gauge',
        'kbms' : 'blue mechanisms',
        'kbvs' : 'blue ion pump',
        'kcas' : 'calibration',
        'kbds' : 'blue detector',
        'kfcs' : 'focal plane camera',
        'kp1s' : 'power 1',
        'kp2s' : 'power 2',
        'kp3s' : 'power 3',
        'kros' : 'rotator',
        'kt1s' : 'temperature 1',
        'kt2s' : 'temperature 2'
    }
    # loop over servers and check the lastalive keyword...

    keyword = "lastalive"
    # compute an alphabetized list with global server first...
    # TODO I'm not sure if there's an easy way to do this in python,
    # instead, checking global server first then running the rest alphabetically
    server = 'kcwi'
    sys.stdout.write(formatLabel("Checking %s" % server))
    sys.stdout.flush()
    #TODO kcwi server not working with ktl, using subprocess for now
    command = "show -s %s %s" % (server, keyword)
    p =  subprocess.Popen(command, stdout = subprocess.PIPE, stderr = subprocess.PIPE, shell=True)
    (output, err) = p.communicate()
    if err == '':
        print("%s (%s)" % (good, server_description[server]))
    else:
        print("%s (%s)" % (error, server_description[server]))
    for server in sorted(server_description):
        if server != 'kcwi':
            sys.stdout.write(formatLabel("Checking %s" % server))
            sys.stdout.flush()
            try:
                ktl.read(server, 'lastalive')
                print("%s (%s)" % (good, server_description[server]))
            except:
                print("%s (%s)" % (error, server_description[server]))
                error_count+=1

#----------------------------------------
# Check applications...
#----------------------------------------

if 'apps' in systems:
    print("Checking %s applications:" % instrument)
    apps = ['ds9']
    for app in apps:
        sys.stdout.write(formatLabel("Checking %s" % app))
        sys.stdout.flush()
        command = "get_kcwi_pid %s" % app
        p =  subprocess.Popen(command, stdout = subprocess.PIPE, stderr = subprocess.PIPE, shell=True)
        (output, err) = p.communicate()
        if output == '': 
            print(error)
            error_count+=1
        elif 'ERROR' in output:
            print(error)
            error_count+=1
        else: 
            print(good)


#----------------------------------------
# Check daemons...
#----------------------------------------

if 'daemons' in systems:
    print("Checking %s daemons:" % instrument)
    daemons =  ['keygrabber', 'kcwidisplayb', 'watch_dcs_rotator', 'kcwiConfManager']
    for daemon in daemons:
        sys.stdout.write(formatLabel("Checking %s" % daemon))
        sys.stdout.flush()
        command = "get_kcwi_pid %s" % daemon
        p =  subprocess.Popen(command, stdout = subprocess.PIPE, stderr = subprocess.PIPE, shell=True)
        (output, err) = p.communicate()
        if output == '': 
            print(error)
            error_count+=1
        elif 'ERROR' in output:
            print(error)
            error_count+=1
        else: 
            print(good)


#----------------------------------------
# Check power...
#----------------------------------------

        
if 'power' in systems:
    power_dictionary = [
        {'name':'pwname1', 'isnameakeyword':'yes', 'library':'kp1s', 'keyword':'pwstat1', 'goodorminvalue':'1', 'maxvalue':None, 'locked':None, 'badstatus':warning},#powerstrip 1,pos 1 FPCam
        {'name':'pwname2', 'isnameakeyword':'yes', 'library':'kp1s', 'keyword':'pwstat2', 'goodorminvalue':'1', 'maxvalue':None, 'locked':None, 'badstatus':error},#powerstrip 1, pos 2 Magiq
        {'name':'pwname3', 'isnameakeyword':'yes', 'library':'kp1s', 'keyword':'pwstat3', 'goodorminvalue':'1', 'maxvalue':None, 'locked':None, 'badstatus':error},#powerstrip 1, pos 3 Glycol
       #{'name':'pwname4', 'isnameakeyword':'yes', 'library':'kp1s', 'keyword':'pwstat4', 'goodorminvalue':'1', 'maxvalue':None, 'locked':None, 'badstatus':error},#powerstrip 1 pos 4 Lkshore1
        {'name':'pwname5', 'isnameakeyword':'yes', 'library':'kp1s', 'keyword':'pwstat5', 'goodorminvalue':'1', 'maxvalue':None, 'locked':None, 'badstatus':error},#powerstrip 1 pos 5 BPGauge
        {'name':'pwname6', 'isnameakeyword':'yes', 'library':'kp1s', 'keyword':'pwstat6', 'goodorminvalue':'1', 'maxvalue':None, 'locked':None, 'badstatus':error},#powerstrip 1 pos 6 BVacIon
        {'name':'pwname7', 'isnameakeyword':'yes', 'library':'kp1s', 'keyword':'pwstat7', 'goodorminvalue':'1', 'maxvalue':None, 'locked':None, 'badstatus':warning},#powerstrip 1 pos 7 Hatch
        {'name':'pwname8', 'isnameakeyword':'yes', 'library':'kp1s', 'keyword':'pwstat8', 'goodorminvalue':'1', 'maxvalue':None, 'locked':None, 'badstatus':warning},#powerstrip 1 pos 8 BShutter
        {'name':'pwname1', 'isnameakeyword':'yes', 'library':'kp2s', 'keyword':'pwstat1', 'goodorminvalue':'1', 'maxvalue':None, 'locked':None, 'badstatus':error},#powerstrip2pos1 HeatExchanger
        {'name':'pwname2', 'isnameakeyword':'yes', 'library':'kp2s', 'keyword':'pwstat2', 'goodorminvalue':'1', 'maxvalue':None, 'locked':None, 'badstatus':error},#powerstrip 2 pos 2 BDet
        {'name':'pwname3', 'isnameakeyword':'yes', 'library':'kp2s', 'keyword':'pwstat3', 'goodorminvalue':'0', 'maxvalue':None, 'locked':None, 'badstatus':error}, #power strip 2 pos 3 Unused
        {'name':'pwname4', 'isnameakeyword':'yes', 'library':'kp2s', 'keyword':'pwstat4', 'goodorminvalue':'1', 'maxvalue':None, 'locked':None, 'badstatus':error}, #power strip 2 pos 4 Lkshore2
        {'name':'pwname5', 'isnameakeyword':'yes', 'library':'kp2s', 'keyword':'pwstat5', 'goodorminvalue':'1', 'maxvalue':None, 'locked':None, 'badstatus':error}, #power strip 2 pos 5 Lantrnx1
        {'name':'pwname6', 'isnameakeyword':'yes', 'library':'kp2s', 'keyword':'pwstat6', 'goodorminvalue':'0', 'maxvalue':None, 'locked':None, 'badstatus':error}, # power strip 2 pos 6 Unused
        {'name':'pwname7', 'isnameakeyword':'yes', 'library':'kp2s', 'keyword':'pwstat7', 'goodorminvalue':'1', 'maxvalue':None, 'locked':None, 'badstatus':error}, #powerstrip2pos7 PB2:BEX;BMS
        {'name':'pwname8', 'isnameakeyword':'yes', 'library':'kp2s', 'keyword':'pwstat8', 'goodorminvalue':'0', 'maxvalue':None, 'locked':None, 'badstatus':error}, # power strip 2 pos 8 Unused
        {'name':'pwname1', 'isnameakeyword':'yes', 'library':'kp3s', 'keyword':'pwstat1', 'goodorminvalue':'1', 'maxvalue':None, 'locked':None, 'badstatus':error}, #power strip 3 pos 1 CalLamps
        {'name':'pwname2', 'isnameakeyword':'yes', 'library':'kp3s', 'keyword':'pwstat2', 'goodorminvalue':'0', 'maxvalue':None, 'locked':None, 'badstatus':error}, # power strip 3 pos 2 Unused
        {'name':'pwname3', 'isnameakeyword':'yes', 'library':'kp3s', 'keyword':'pwstat3', 'goodorminvalue':'0', 'maxvalue':None, 'locked':None, 'badstatus':error}, # power strip 3 pos 3 Unused
        {'name':'pwname4', 'isnameakeyword':'yes', 'library':'kp3s', 'keyword':'pwstat4', 'goodorminvalue':'0', 'maxvalue':None, 'locked':None, 'badstatus':error}, # power strip 3 pos 4 Unused
        {'name':'pwname5', 'isnameakeyword':'yes', 'library':'kp3s', 'keyword':'pwstat5', 'goodorminvalue':'0', 'maxvalue':None, 'locked':None, 'badstatus':error}, # power strip 3 pos 5 Unused
        {'name':'pwname6', 'isnameakeyword':'yes', 'library':'kp3s', 'keyword':'pwstat6', 'goodorminvalue':'0', 'maxvalue':None, 'locked':None, 'badstatus':error}, # power strip 3 pos 6 Unused
        {'name':'pwname7', 'isnameakeyword':'yes', 'library':'kp3s', 'keyword':'pwstat7', 'goodorminvalue':'0', 'maxvalue':None, 'locked':None, 'badstatus':error}, # power strip 3 pos 7 Unused
        {'name':'pwname8', 'isnameakeyword':'yes', 'library':'kp3s', 'keyword':'pwstat8', 'goodorminvalue':'1', 'maxvalue':None, 'locked':None, 'badstatus':error} #powerstrip3 pos 8 PB1:CAL;ROT
    ]

    errors, warnings = reportStages('power', power_dictionary)
    error_count += int(errors)
    warning_count += int(warnings)

#----------------------------------------
# Check stages...
#----------------------------------------

if 'stages' in systems:
    stages_dictionary = [
        {'name':'Blue exchanger status', 'isnameakeyword':'no', 'library':'kbes', 'keyword':'status', 'goodorminvalue':'OK', 'maxvalue':None, 'locked':'movelock', 'badstatus':warning}, # global bes status
        {'name':'Grating', 'isnameakeyword':'no', 'library':'kbes', 'keyword':'gstatus', 'goodorminvalue':'Success: Coordinated park motion complete.', 'maxvalue':None, 'locked':'movelock', 'badstatus':warning}, # Grating 
        {'name':'Filter', 'isnameakeyword':'no', 'library':'kbes', 'keyword':'fstatus', 'goodorminvalue':'Success: Coordinated park motion complete.', 'maxvalue':None, 'locked':'movelock', 'badstatus':warning}, # Filter
        {'name':'Grating rotator', 'isnameakeyword':'no', 'library':'kbes', 'keyword':'grstatus', 'goodorminvalue':'Move complete', 'maxvalue':None, 'locked':'movelock', 'badstatus':warning}, # grating rotator
        {'name':'Grating pusher', 'isnameakeyword':'no', 'library':'kbes', 'keyword':'gpstatus', 'goodorminvalue':'Move complete', 'maxvalue':None, 'locked':'movelock', 'badstatus':warning}, # grating pusher
        {'name':'Grating transfer', 'isnameakeyword':'no', 'library':'kbes', 'keyword':'gtstatus', 'goodorminvalue':'Move complete', 'maxvalue':None, 'locked':'movelock', 'badstatus':warning}, # grating transfer
        {'name':'Filter pusher', 'isnameakeyword':'no', 'library':'kbes', 'keyword':'fpstatus', 'goodorminvalue':'Move complete', 'maxvalue':None, 'locked':'movelock', 'badstatus':warning}, # filter pusher
        {'name':'Filter transfer', 'isnameakeyword':'no', 'library':'kbes', 'keyword':'ftstatus', 'goodorminvalue':'Move complete', 'maxvalue':None, 'locked':'movelock', 'badstatus':warning}, # filter transfer
        {'name':'Grating and filter cassette', 'isnameakeyword':'no', 'library':'kbes', 'keyword':'castatus', 'goodorminvalue':'Move complete', 'maxvalue':None, 'locked':'movelock', 'badstatus':warning}, # grating cassette
        {'name':'Focus mechanism', 'isnameakeyword':'no', 'library':'kbms', 'keyword':'focstatus', 'goodorminvalue':'OK', 'maxvalue':None, 'locked':'movelock', 'badstatus':warning}, # Focus
        {'name':'Nod and shuffle mask', 'isnameakeyword':'no', 'library':'kbms', 'keyword':'nasstatus', 'goodorminvalue':'OK', 'maxvalue':None, 'locked':'movelock', 'badstatus':warning}, # Nod and shuffle
        {'name':'Articulation stage', 'isnameakeyword':'no', 'library':'kbms', 'keyword':'artstatus', 'goodorminvalue':'OK', 'maxvalue':None, 'locked':'movelock', 'badstatus':warning}, # Articulation stage
        {'name':'IFU', 'isnameakeyword':'no', 'library':'kcas', 'keyword':'ifustatus', 'goodorminvalue':'OK', 'maxvalue':None, 'locked':'movelock', 'badstatus':warning}, # IFU
        {'name':'Calibration unit', 'isnameakeyword':'no', 'library':'kcas', 'keyword':'status', 'goodorminvalue':'OK', 'maxvalue':None, 'locked':'movelock', 'badstatus':warning} # Status
    ]

    errors, warnings = reportStages('stages', stages_dictionary)
    error_count += int(errors)
    warning_count += int(warnings)

#----------------------------------------
# Check settings...
#----------------------------------------

if 'settings' in systems:
    settings_dictionary = [
        {'name':'tmploc1', 'isnameakeyword':'yes', 'library':'kt1s', 'keyword':'tmp1', 'goodorminvalue':-112.15, 'maxvalue':-108.15, 'locked':None, 'badstatus':warning}, # Blue CCD A
        {'name':'tmploc2', 'isnameakeyword':'yes', 'library':'kt1s', 'keyword':'tmp2', 'goodorminvalue':-5, 'maxvalue':5, 'locked':None, 'badstatus':warning}, # blue cam B
        {'name':'tmploc3', 'isnameakeyword':'yes', 'library':'kt1s', 'keyword':'tmp3', 'goodorminvalue':-5, 'maxvalue':5, 'locked':None, 'badstatus':warning}, # Blue shutter
        {'name':'tmploc4', 'isnameakeyword':'yes', 'library':'kt1s', 'keyword':'tmp4', 'goodorminvalue':-112.15, 'maxvalue':-108.15, 'locked':None, 'badstatus':warning}, # blue invar plate
        {'name':'tmploc5', 'isnameakeyword':'yes', 'library':'kt1s', 'keyword':'tmp5', 'goodorminvalue':-140, 'maxvalue':-120, 'locked':None, 'badstatus':warning}, # blue strap bottom
        {'name':'tmploc6', 'isnameakeyword':'yes', 'library':'kt1s', 'keyword':'tmp6', 'goodorminvalue':-180, 'maxvalue':-160, 'locked':None, 'badstatus':warning}, # blue strap top
        {'name':'tmploc7', 'isnameakeyword':'yes', 'library':'kt1s', 'keyword':'tmp7', 'goodorminvalue':-5, 'maxvalue':5, 'locked':None, 'badstatus':warning}, # blue case...
        {'name':'tmploc8', 'isnameakeyword':'yes', 'library':'kt1s', 'keyword':'tmp7', 'goodorminvalue':-5, 'maxvalue':10, 'locked':None, 'badstatus':warning}, # bench bottom
        {'name':'Status (ion pump)', 'isnameakeyword':'no', 'library':'kbvs', 'keyword':'hvon', 'goodorminvalue':'1', 'maxvalue':None, 'locked':None, 'badstatus':error}, # ion pump status
        {'name':'Pressure (ion pump)', 'isnameakeyword':'no', 'library':'kbvs', 'keyword':'pressure', 'goodorminvalue':0.0, 'maxvalue':0.0000001, 'locked':None, 'badstatus':warning}, # ion pump pressure
        {'name':'Current (ion pump)', 'isnameakeyword':'no', 'library':'kbvs', 'keyword':'current', 'goodorminvalue':0.0, 'maxvalue':0.000002, 'locked':None, 'badstatus':warning},#ion pump current
        {'name':'Voltage (ion pump)', 'isnameakeyword':'no', 'library':'kbvs', 'keyword':'voltage', 'goodorminvalue':4900, 'maxvalue':5010, 'locked':None, 'badstatus':warning},#ion pump voltage
        {'name':'Pressure gauge', 'isnameakeyword':'no', 'library':'kbgs', 'keyword':'pgpress', 'goodorminvalue':0, 'maxvalue':0.1, 'locked':None, 'badstatus':warning}, # pressure gauge
        {'name':'CCD power', 'isnameakeyword':'no', 'library':'kbds', 'keyword':'CCDPOWER', 'goodorminvalue':'1', 'maxvalue':None, 'locked':None, 'badstatus':warning}, #datataking system status
        {'name':'current instrument', 'isnameakeyword':'no', 'library':'dcs', 'keyword':'currinst', 'goodorminvalue':instrument, 'maxvalue':None, 'locked':None, 'badstatus':warning} # current instrument check
    ]

    errors, warnings = reportStages('settings', settings_dictionary)
    error_count += int(errors)
    warning_count += int(warnings)

#----------------------------------------
# print final status...
#----------------------------------------

print("-----------------------------------------------------------------------------")
if error_count == 0 and warning_count == 0:
    print("\tAll tested %s systems appear functional.\n" % instrument)
else:
   print("\t%d errors and %d warnings were issued.\n" % (error_count, warning_count))

print("Please visually check Glycol flow. This script only checks glycol pump power.")
print("-----------------------------------------------------------------------------")

if error_count > 0:  
    sys.exit(error_count)
elif warning_count > 0:  
    sys.exit(-warning_count)
