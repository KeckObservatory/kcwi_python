#! /kroot/rel/default/bin/kpython
import subprocess
import argparse
import os
import sys

defsystems = ['computers', 'servers', 'power', 'settings', 'apps', 'daemons', 'stages'] #default system values
#TODO see if we need to add -m option
description = "check functionality of all KCWI systems"
parser = argparse.ArgumentParser(description=description)
parser.add_argument('systems', nargs='*', help='choose which systems to check (default is all EXCEPT apps)')
args = parser.parse_args()


#TODO for some reason, adding choices to the systems argument doesn't allow for no arguments
#this does the choices check instead, should redo when I figure out issue
if args.systems != []: 
    systems = args.systems
    for system in systems:
        if system not in defsystems:
            print("error: argument systems: invalid choice: [] (choose from 'computers', 'servers', 'power', 'settings', 'apps', 'daemons', 'stages')")
            sys.exit(1)
else:
    systems = ['computers', 'servers', 'power', 'settings', 'daemons', 'stages'] #list of strings in the system array without apps

#label making function
def labelize(string):
    size = 45
    label = ' %s' % string
    while(len(label) < size):
        label += '.'
    return label

#reportStages function
#TODO write this


def reportStages(system):
    print("Checking %s %s:" % (instrument, system))

    for record in system_dic:
        (library, keyword) = (record[2], record[3])
        if record[1] = yes:
            #TODO use ktl to extract
            name  = "show -s $library -terse %s" % record[0]
        else:   
            name = record[0]

    sys.stdout.write(labelize("Checking %s" % server))
    sys.stdout.flush()

    #TODO use ktl here
    value = "show -s %s -terse %s" % (library, keyword)

    if 'tmp' in keyword and keyword != -1:
        value = value - 273.15




# misc definitions...
instrument = 'KCWI'
(good, warning, error) = ("OK", "WARNING!", "ERROR!") 
n_errors = 0 # number of errors
n_warnings = 0 # number of errors

# verify host...

goodhost ='kcwiserver'
testhost = 'kcwibuild'
env = os.environ.get('HOST')
if env != goodhost and env != testhost:
    print("ERROR: you can only run testAll on %s or on %s" % (goodhost, testhost))
    sys.exit(1)


#----------------------------------------
# Check computers
#----------------------------------------
if 'computers' in systems:
    print("Checking %s computers:" % instrument)

    computer_description = {
        'kcwitarg' : 'detector target',
        'kcwiserver' : 'main server',
        'bexgalil' : 'blue exchanger Galil',
        'bmsgalil' : 'blue mechanisms Galil',
        'calgalil' : 'calibration unit Galil',
        'rotgalil' : 'rotator Galil',
        'lantronix' : 'Lantronix terminal server',
        'eaton' : 'AC power controller 1',
        'eaton2' : 'AC power controller 2',
        'eaton3' : 'AC power controller 3',
        'lakeshore' : 'Lakeshore unit',
    }
    for computer in sorted(computer_description):
        sys.stdout.write(labelize("Checking %s" % computer))
        sys.stdout.flush()
        command = "ping -c 1 -t 1 %s" % computer
        p =  subprocess.Popen(command, stdout = subprocess.PIPE, stderr = subprocess.PIPE, shell=True)
        (output, err) = p.communicate()
        if err == '':
            print("%s (%s)" % (good, computer_description[computer]))
        else:
            print("%s (%s)" % (error, computer_description[computer]))
            n_errors+=1


#----------------------------------------
# Check servers
#----------------------------------------
if 'servers' in systems:
    print("Checking %s servers:\n" % instrument)

    server_description = {
        'kcwi' : 'global server',
        'kbes' : 'blue exchanger',
        'kbgs' : 'blue pressure gauge',
        'kbms' : 'blue mechanisms',
        'kbvs' : 'blue ion pump',
        'kcas' : 'calibration',
        'kbds' : 'blue detector',
        'kfcs' : 'focal plane camera',
        'kp1s' : 'power 1',
        'kp2s' : 'power 2',
        'kp3s' : 'power 3',
        'kros' : 'rotator',
        'kt1s' : 'temperature 1',
        'kt2s' : 'temperature 2',
    }
    # loop over servers and check the lastalive keyword...

    keyword = "lastalive"
    # compute an alphabetized list with global server first...
    # TODO I'm not sure if there's an easy way to do this in python,
    # instead, checking global server first then running the rest alphabetically
    server = 'kcwi'
    sys.stdout.write(labelize("Checking %s" % server))
    sys.stdout.flush()
    command = "show -s %s %s" % (server, keyword)
    p =  subprocess.Popen(command, stdout = subprocess.PIPE, stderr = subprocess.PIPE, shell=True)
    (output, err) = p.communicate()
    if err == '':
        print("%s (%s)" % (good, server_description[server]))
    else:
        print("%s (%s)" % (error, server_description[server]))
    for server in sorted(server_description):
        if server != 'kcwi':
            sys.stdout.write(labelize("Checking %s" % server))
            sys.stdout.flush()
            command = "show -s %s %s" % (server, keyword)
            p =  subprocess.Popen(command, stdout = subprocess.PIPE, stderr = subprocess.PIPE, shell=True)
            (output, err) = p.communicate()
            if err == '':
                print("%s (%s)" % (good, server_description[server]))
            else:
                print("%s (%s)" % (error, server_description[server]))
                n_errors+=1

#----------------------------------------
# Check applications...
#----------------------------------------
###TODO for loop used in case we add more apps, I believe

if 'apps' in systems:
    print("Checking %s applications:" % instrument)
    apps = ['ds9']
    for app in apps:
        sys.stdout.write(labelize("Checking %s" % app))
        sys.stdout.flush()
        command = "get_kcwi_pid $item" % app
        p =  subprocess.Popen(command, stdout = subprocess.PIPE, stderr = subprocess.PIPE, shell=True)
        (output, err) = p.communicate()
        if err == '':
            print(good)
        else:
            print(error)
            n_errors+=1


#----------------------------------------
# Check daemons...
#----------------------------------------

if 'daemons' in systems:
    print("Checking %s daemons:" % instrument)
    daemons =  ['keygrabber', 'kcwidisplayb', 'watch_dcs_rotator', 'kcwiConfManager']
    for daemon in daemons:
        sys.stdout.write(labelize("Checking %s" % daemon))
        sys.stdout.flush()
        command = "get_kcwi_pid $item" % daemon
        p =  subprocess.Popen(command, stdout = subprocess.PIPE, stderr = subprocess.PIPE, shell=True)
        (output, err) = p.communicate()
        if err == '':
            print(good)
        else:
            print(error)
            n_errors+=1


#----------------------------------------
# Check power...
#----------------------------------------

if 'power' in systems:
    #setup [NAME, ISNAMEAKEYWORD, LIBRARY, KEYWORD, GOODVAULE, BADSTATUS]
    power_dic = [
        ['pwname1', 'yes', 'kp1s', 'pwstat1', '1', warning] # power strip 1, pos 1 FPCam
        ['pwname2', 'yes', 'kp1s', 'pwstat2', '1', error] # power strip 1, pos 2 Magiq
        ['pwname3', 'yes', 'kp1s', 'pwstat3', '1', error] # power strip 1, pos 3 Glycol
       #['pwname4', 'yes', 'kp1s', 'pwstat4', '1', error] # power strip 1 pos 4 Lkshore1
        ['pwname5', 'yes', 'kp1s', 'pwstat5', '1', error] # power strip 1 pos 5 BPGauge
        ['pwname6', 'yes', 'kp1s', 'pwstat6', '1', error] # power strip 1 pos 6 BVacIon
        ['pwname7', 'yes', 'kp1s', 'pwstat7', '1', warning] # power strip 1 pos 7 Hatch
        ['pwname8', 'yes', 'kp1s', 'pwstat8', '1', warning] # power strip 1 pos 8 BShutter
        ['pwname1', 'yes', 'kp2s', 'pwstat1', '1', error] # power strip 2 pos 1 HeatExchanger
        ['pwname2', 'yes', 'kp2s', 'pwstat2', '1', error] # power strip 2 pos 2 BDet
        ['pwname3', 'yes', 'kp2s', 'pwstat3', '0', error] # power strip 2 pos 3 Unused
        ['pwname4', 'yes', 'kp2s', 'pwstat4', '1', error] # power strip 2 pos 4 Lkshore2
        ['pwname5', 'yes', 'kp2s', 'pwstat5', '1', error] # power strip 2 pos 5 Lantrnx1
        ['pwname6', 'yes', 'kp2s', 'pwstat6', '0', error] # power strip 2 pos 6 Unused
        ['pwname7', 'yes', 'kp2s', 'pwstat7', '1', error] # power strip 2 pos 7 PB2:BEX;BMS
        ['pwname8', 'yes', 'kp2s', 'pwstat8', '0', error] # power strip 2 pos 8 Unused
        ['pwname1', 'yes', 'kp3s', 'pwstat1', '1', error] # power strip 3 pos 1 CalLamps
        ['pwname2', 'yes', 'kp3s', 'pwstat2', '0', error] # power strip 3 pos 2 Unused
        ['pwname3', 'yes', 'kp3s', 'pwstat3', '0', error] # power strip 3 pos 3 Unused
        ['pwname4', 'yes', 'kp3s', 'pwstat4', '0', error] # power strip 3 pos 4 Unused
        ['pwname5', 'yes', 'kp3s', 'pwstat5', '0', error] # power strip 3 pos 5 Unused
        ['pwname6', 'yes', 'kp3s', 'pwstat6', '0', error] # power strip 3 pos 6 Unused
        ['pwname7', 'yes', 'kp3s', 'pwstat7', '0', error] # power strip 3 pos 7 Unused
        ['pwname8', 'yes', 'kp3s', 'pwstat8', '1', error] # power strip 3 pos 8 PB1:CAL;ROT
    ]

    reportStage(power_dic)


#----------------------------------------
# Check stages...
#----------------------------------------

if 'stages' in systems:
    #setup [NAME, ISNAMEAKEYWORD, LIBRARY, KEYWORD, GOODVAULE, LOCKED, BADSTATUS]
    stages_dic = [
        ['Blue exchanger status', 'no', 'kbes', 'status', 'OK', 'movelock', warning] # global bes status
        ['Grating', 'no', 'kbes', 'gstatus', 'Success: Coordinated park motion complete.', 'movelock', warning] # Grating 
        ['Filter', 'no', 'kbes', 'fstatus', 'Success: Coordinated park motion complete.', 'movelock', warning] # Filter
        ['Grating rotator', 'no', 'kbes', 'grstatus', 'Move complete', 'movelock', warning] # grating rotator
        ['Grating pusher', 'no', 'kbes', 'gpstatus', 'Move complete', 'movelock', warning] # grating pusher
        ['Grating transfer', 'no', 'kbes', 'gtstatus', 'Move complete', 'movelock', warning] # grating transfer
        ['Filter pusher', 'no', 'kbes', 'fpstatus', 'Move complete', 'movelock', warning] # filter pusher
        ['Filter transfer', 'no', 'kbes', 'ftstatus', 'Move complete', 'movelock', warning] # filter transfer
        ['Grating and filter cassette', 'no', 'kbes', 'castatus', 'Move complete', 'movelock', warning] # grating cassette
        ['Focus mechanism', 'no', 'kbms', 'focstatus', 'OK', 'movelock', warning] # Focus
        ['Nod and shuffle mask', 'no', 'kbms', 'nasstatus', 'OK', 'movelock', warning] # Nod and shuffle
        ['Articulation stage', 'no', 'kbms', 'artstatus', 'OK', 'movelock', warning] # Articulation stage
        ['IFU', 'no', 'kcas', 'ifustatus', 'OK', 'movelock', warning] # IFU
        ['Calibration unit', 'no', 'kcas', 'status', 'OK', 'movelock', warning] # Status
    ]

    reportStage(stages_dic)


#----------------------------------------
# Check settings...
#----------------------------------------

if 'settings' in systems:
    #setup [NAME, ISNAMEAKEYWORD, LIBRARY, KEYWORD, MINVALUE, MAXVALUE, BADSTATUS]
    settings_dic = [
        ['tmploc1', 'yes', 'kt1s', 'tmp1', -112.15, -108.15, warning] # Blue CCD A
        ['tmploc2', 'yes', 'kt1s', 'tmp2', -5, 5, warning] # blue cam B
        ['tmploc3', 'yes', 'kt1s', 'tmp3', -5, 5, warning] # Blue shutter
        ['tmploc4', 'yes', 'kt1s', 'tmp4', -112.15, -108.15, warning] # blue invar plate
        ['tmploc5', 'yes', 'kt1s', 'tmp5', -140, -120, warning] # blue strap bottom
        ['tmploc6', 'yes', 'kt1s', 'tmp6', -180, -160, warning] # blue strap top
        ['tmploc7', 'yes', 'kt1s', 'tmp7', -5, 5, warning] # blue case...
        ['tmploc8', 'yes', 'kt1s', 'tmp7', -5, 10, warning] # bench bottom
        ['Status (ion pump)', 'no', 'kbvs', 'hvon', 1, error] # ion pump status
        ['Pressure (ion pump)', 'no', 'kbvs', 'pressure', 0.0, 0.0000001, warning] # ion pump pressure
        ['Current (ion pump)', 'no', 'kbvs', 'current', 0.0, 0.000002, warning] # ion pump current
        ['Voltage (ion pump)', 'no', 'kbvs', 'voltage', 4900, 5010, warning] # ion pump voltage
        ['Pressure gauge', 'no', 'kbgs', 'pgpress', 0, 0.1, warning] # pressure gauge
        ['CCD power', 'no', 'kbds', 'CCDPOWER', 1, warning] # datataking system status
        ['current instrument', 'no', 'dcs', 'currentinst', instrument, warning] # current instrument check
    ]

    reportStage(settings_dic)

